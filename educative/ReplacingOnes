class ReplacingOnes {

/*
  
Given an array containing 0s and 1s, if you are allowed to
replace no more than ‘k’ 0s with 1s, find the length of the
longest contiguous subarray having all 1s.

Example 1:

Input: Array=[0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1], k=2
Output: 6
Explanation: Replace the '0' at index 5 and 8 to have the
 longest contiguous subarray of 1s having length 6.

*/
  public static int findLength(int[] arr, int k) {


            
    //[0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1].  0=2,  1=2
  //   wS__      __wE
  // start first with maxLength, windowStart, windowEnd 
  //for loop 
  // add element to map 
  // if element is 0 then check value if while 0's value is  > k
  //  get start remove -1 from 0 in map
  // get maxLength 

    int maxLength = 0; 
    int windowStart = 0; 

    Map<Integer, Integer> map = new HashMap<>(); 

    for( int windowEnd = 0; windowEnd < arr.length; windowEnd++){
      int currentNum = arr[windowEnd]; 

      map.put(currentNum, map.getOrDefault(currentNum, 0)+1);
    

      if(map.get(0) > k){
        map.put(arr[windowStart], map.get(arr[windowStart])-1);
        windowStart++;

      } 
      
      maxLength = Math.max(maxLength, windowEnd - windowStart + 1);
    }

    return maxLength;
  }
}